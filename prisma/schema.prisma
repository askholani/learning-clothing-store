generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  idProduct                String @id @default(cuid()) @map("id_product")
  name              String?
  description       String?
  image             String?
  stock             Int?
  price             Int?
  
  categories Int[]
  collections Int[]

  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime? @map("updated_at")
  deleted_at        DateTime? @map("deleted_at")
  discount          Int?
  sizes             String[]        @db.VarChar
  colors            String[]        @db.VarChar
  productImages    String[] @db.VarChar() @map("product_images") 

  @@map("products")
}

model Categories {
  idProduct String @map("id_product")
  idCategory   String     @id @default(cuid()) @map("id_category")
  name String? @db.VarChar

  @@map("categories")
}

model Collections {
  idProduct String @map("id_product")
  idCollection   String     @id @default(cuid()) @map("id_collection")
  name String? @db.VarChar

  @@map("collections")
}


model DetailTransactions {
  idDetailTransactions String       @id @default(cuid()) @map("id_detail_transactions")
  idTransaction       String? @map("id_transaction")
  idProduct           String? @map("id_product")

  quantity             Int?
  size                 String?   @db.VarChar
  color                String?   @db.VarChar
  created_at           DateTime? @db.Time(6)
  shipping_methode     String?   @db.VarChar
  payment_methode      String?   @db.VarChar

  @@map("detail_transactions")
  trasactions Transactions? @relation(fields: [idTransaction], references: [idTrasaction])
}

model Transactions {
  idTrasaction  String        @id @default(cuid()) @map("id_transaction")
  idUser        String @map("id_user")
  totalQuantity Int @map("total_quantity")
  totalPrice    Int @map("total_price")
  createdAt     DateTime[] @db.Time @map("created_at")

  detail_transaction DetailTransactions[]
  detail_trasaction_no_login DetailTransactionsNoLogin[]

  @@map("transactions")
}

model DetailTransactionsNoLogin{
  idDetailTransactionsNoLogin String       @id @map("id_transaction_no_login")
  idTransactions                      String? @map("id_transaction")
  idProduct                           String? 
  quantity                             Int?
  size                                 String?   @db.VarChar
  created_at                           DateTime? @db.Timestamptz(6)
  email                                String?   @db.VarChar
  phone                                Int?
  address                              String?   @db.VarChar
  name                                 String?   @db.VarChar
  shipping_methode                     String?   @db.VarChar
  payment_method                       String?   @db.VarChar

  trasactions Transactions? @relation(fields: [idTransactions], references: [idTrasaction])

  @@map("detail_transactions_no_login")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}