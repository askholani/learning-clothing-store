generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  idProduct                Int             @id(map: "id_product")
  name              String?
  description       String?
  image             String?
  stock             Int?
  price             Int?

  detailTransactions DetailTransactions[]
  categories Categories[]
  collections Collections[]

  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime? @map("updated_at")
  deleted_at        DateTime? @map("deleted_at")
  discount          Int?
  sizes             String[]        @db.VarChar
  colors            String[]        @db.VarChar
  productImages    String[] @map("product_images")

  @@map("products")
}

model Categories {
  idProduct Int @map("id_product")
  idCategory   Int     @id @map("id_category")
  name String? @db.VarChar

  products Products @relation(fields: [idProduct], references: [idProduct])

  @@map("categories")
}

model Collections {
  idProduct Int @map("id_product")
  idCollection   Int     @id @map("id_collection")
  name String? @db.VarChar

  product Products @relation(fields: [idProduct],references: [idProduct])

  @@map("collections")
}


model DetailTransactions {
  idDetailTransactions Int       @id @map("id_detail_transactions")
  idTransaction       Int? @map("id_transaction")
  idProduct           Int @map("id_product")
  quantity             Int?
  size                 String?   @db.VarChar
  color                String?   @db.VarChar
  created_at           DateTime? @db.Time(6)
  shipping_methode     String?   @db.VarChar
  payment_methode      String?   @db.VarChar

  @@map("detail_transactions")
  trasactions Transactions @relation(fields: [idTransaction], references: [idTrasaction])
  products Products @relation(fields: [idProduct], references: [idProduct])
}

model Transactions {
  
  idTrasaction  Int        @id @map("id_transaction")
  idUser        Int @map("id_user")
  totalQuantity Int @map("total_quantity")
  totalPrice    Int @map("total_price")
  createdAt     DateTime[] @db.Time @map("created_at")

  detail_transaction DetailTransactions[]
  user User @relation(fields: [idUser],references: [idUser])
}

model detail_transactions_without_login {
  id_detail_transactions_without_login Int       @id
  id_transactions                      Int?
  id_product                           Int?
  quantity                             Int?
  size                                 String?   @db.VarChar
  created_at                           DateTime? @db.Timestamptz(6)
  email                                String?   @db.VarChar
  phone                                Int?
  address                              String?   @db.VarChar
  name                                 String?   @db.VarChar
  shipping_methode                     String?   @db.VarChar
  payment_method                       String?   @db.VarChar
}

model Account {
  id                 String  @id @default(cuid()) 
  // @id : primary key.
  // @default : secaro otomatis akan diisi ketika penambahan data ke tabel.
  // cuuid () : fungsi yang menjamin setiap kolom id akan diisi nilai unik.

  userId             String  @map("user_id")
  // @map("user_id"): memetakan userId ke kolom dengan nama user_id di datbase.
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  // ? opsional (boleh memiliki nilai kosong)
  // @db.Text : tipe data text.
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @relation : relasi antar tabel
  // relasi antar Model user pada kolom id dengan usertId pada model Account.
  // onDelete : Cascade :: data pada tabel user maka akan menghapus data pada tabel account.

  @@unique([provider, providerAccountId])
  // kombinasi nilai dari kedua kolom tersebut harus unik.
  // "google" - "123" dan "google" - "123" : tidak boleh.
  // "google" - "321" dan "google" - "123" : boleh/

  @@map("accounts")
  // memetakan Model Accounts dengan tabel accounts.
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  idUser            String    @id @default(cuid()) @map("id_user")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  // relasi dengan Model Account 
  // [] : 1 user bisa memiliki banyak account
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
